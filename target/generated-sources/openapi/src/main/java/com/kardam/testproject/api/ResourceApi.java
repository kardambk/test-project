/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.kardam.testproject.api;

import com.kardam.testproject.dto.Resource;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-23T11:55:19.215386500+05:30[Asia/Calcutta]")
@Validated
@Tag(name = "resource", description = "the resource API")
public interface ResourceApi {

    default ResourceApiDelegate getDelegate() {
        return new ResourceApiDelegate() {};
    }

    /**
     * POST /resource : create Resource
     *
     * @param resource  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createResource",
        summary = "create Resource",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Resource.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/resource",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Resource> createResource(
        @Parameter(name = "Resource", description = "", schema = @Schema(description = "")) @Valid @RequestBody(required = false) Resource resource
    ) {
        return getDelegate().createResource(resource);
    }


    /**
     * DELETE /resource/delete/{id} : Delete Resource By Id
     *
     * @param id Unique Id of a Resource (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteResourceById",
        summary = "Delete Resource By Id",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/resource/delete/{id}"
    )
    default ResponseEntity<Void> deleteResourceById(
        @Parameter(name = "id", description = "Unique Id of a Resource", required = true, schema = @Schema(description = "")) @PathVariable("id") Integer id
    ) {
        return getDelegate().deleteResourceById(id);
    }


    /**
     * GET /resource/{id} : Get Resource By Id
     *
     * @param id Unique Id of a Resource (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getResourceById",
        summary = "Get Resource By Id",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Resource.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/resource/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Resource> getResourceById(
        @Parameter(name = "id", description = "Unique Id of a Resource", required = true, schema = @Schema(description = "")) @PathVariable("id") Integer id
    ) {
        return getDelegate().getResourceById(id);
    }


    /**
     * PUT /resource/update : update Resource
     *
     * @param resource  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateResource",
        summary = "update Resource",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Resource.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/resource/update",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Resource> updateResource(
        @Parameter(name = "Resource", description = "", schema = @Schema(description = "")) @Valid @RequestBody(required = false) Resource resource
    ) {
        return getDelegate().updateResource(resource);
    }

}
